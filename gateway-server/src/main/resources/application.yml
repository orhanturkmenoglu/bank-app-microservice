server:
  port: 8072
spring:
  application:
    name: "gateway-server"
  # config-server içerisindeki dosyayı okuyacak
  config:
    import: "optional:configserver:http://localhost:8071/"

  # Eğer Eureka kullanıyorsanız, Discovery Locator özelliği ile dinamik rota yönetimi yapabilirsiniz.
  # burada dinamik rota yönetimi aktif edildi ve eureka server'a baglanildi ve eureka server'dan rota bilgileri alindi
  # bu sayede dinamik olarak rota yönetimi yapildi
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false # dinamik rota yonetimi pasif edildi sadece özel yönlendirmem geçerli olacak.http://localhost:8072/accounts/api/fetch?mobileNumber=4344376871 iptal olacak
          lower-case-service-id: true  # bu ayar servis id'lerini  kucuk harfe cevirir
          #http://localhost:8072/ACCOUNTS/api/create   : ACCOUNTS OLAN KISMI accounts olarak kullanmamızı sağlar url büyük harf olmamalıdır.

      # http timeout ayarları
      httpclient:
        connect-timeout: 1000
        response-timeout: 2s
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 1s
      connect-timeout: 2s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true

logging:
  level:
    org.springframework.cloud.gateway: DEBUG

info:
  app:
    name: "gateway-server"
    description: "gateway-server microservice application"
    version: "1.0.0"


resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        automaticTransitionFromOpenToHalfOpenEnabled: true

